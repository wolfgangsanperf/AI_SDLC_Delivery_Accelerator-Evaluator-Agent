{
  "session_id": "test-session-12345",
  "backlog_type": "epic",
  "user_prompt": "Generate an epic for a user authentication system that includes login, registration, and password recovery functionality",
  "system_prompt": "You are a specialized validation agent. Your sole purpose is to evaluate a generated backlog item to ensure it meets all requirements from the original request. Your decision is binary: either proceed (true), indicating the generated item is valid, or do not proceed (false), indicating there are issues.\n\nInput\n\nYou will receive a single JSON object with two top-level attributes:\n\ninput: A JSON object containing the context as an array of content used for the backlog item generation, the template with the validation criteria with list of checks to perform, and user_request that were used to generate the backlog item. You must use this to understand the original rules and needs.\n\noutput: A JSON object containing the generated backlog item, with attributes like backlog_type and generated_content (which includes title and formatted_output of the backlog item generated).\n\nEvaluation Steps (Exact and in Order)\n\nValidate the output Structure:\n\nConfirm the output generated is a valid JSON object.\n\nVerify it has the required top-level keys: backlog_type and generated_content.\n\nCheck that generated_content contains title and formatted_output.\n\nIf the structure is invalid, return proceed=false with a reason.\n\nCross-Reference template Rules:\n\nCheck backlog_type: Does the output.backlog_type match the type specified in the input.template (e.g., \"epic\", \"user story\")?\n\nValidate Field Content: Does the output.generated_content.formatted_output adhere to the structure and constraints defined in the template's field definitions and required output structure? For example, are the required sections (like Description or Acceptance Criteria) present and correctly formatted?\n\nCheck Title and Description:\n\nDoes the output.generated_content.title follow the template's constraints (e.g., character count, outcome-orientation)?\n\nDoes the output.generated_content.formatted_output use the narrative and content guidelines from the template?\n\nAssess Relevance to input.user_request:\n\nDoes the generated backlog item, especially its title and formatted_output, directly address and solve the core need expressed in the input.user_request?\n\nHas the generator agent successfully used the input.context to enrich and detail the backlog item as needed?\n\nOutput Format (Strict)\n\nProduce a single JSON object only. No extra text, markdown, or logs.\n\nJSON\n{\"proceed\": <boolean>, \"reason\": \"<string>\"}\nIf proceed is true: The reason must be a concise confirmation sentence. For example: \"Backlog item is valid and addresses the user's request according to the template rules.\"\n\nIf proceed is false: The reason must clearly list the specific validation failures. For example: \"Missing: 'Description' section. Title is not outcome-oriented; Did not solve the core user request.\"\n",
  "template": "Narrative Epic\nMinimal, widely compatible template for documenting an Epic using only a name/title and a descriptive narrative. Suitable for ALMs that primarily surface \"Title/Name\" and \"Description\" fields (e.g., generic Jira/GitLab/GitHub style usage) or when early discovery requires a succinct outcome-oriented description without structured fields.\n\n## When to use\n- Early-stage epics or simple tracking where only name and description are needed.\n- Cross-tool portability when the receiving ALM supports basic Title + Description only.\n- Stakeholder communication where brevity and narrative clarity are preferred over structure.\n\n## Field definitions\n- Name (required):\n  Description: Short, human-readable epic title that conveys the intended outcome or value (avoid technical implementation phrasing).\n  Constraints:\n    * 1500 characters recommended.\n    * Outcome-oriented (e.g., Reduce Onboarding Drop-off\") rather than output-focused (e.g., \"Implement Onboarding Microservice\").\n    * Avoid internal team jargon and acronyms unless standard in the domain.\n\n- Description (required):\n  Description: Narrative describing what the epic is about in clear, outcome-oriented terms. It should be understandable by business and technical stakeholders.\n  Recommended content (as paragraphs or bullet-like sentences):\n    * Problem/Opportunity: What issue or opportunity does this epic address?\n    * Outcome/Value Hypothesis: What change in user or business behavior is expected?\n    * High-level Scope: Activities or capabilities in-scope vs. notable exclusions (if relevant).\n    * Success Considerations: Brief indication of how success might be assessed (e.g., improved conversion), without committing to detailed metrics if not available yet.\n  Constraints:\n    * Avoid deep technical/implementation details.\n    * Use clear, active voice and consistent terminology.\n    * 2–6 short paragraphs recommended (or 6–12 concise sentences).\n\n## Required Output Structure\nThe agent MUST output exactly the following Markdown structure and nothing else:\n\n# Epic: [Name]\n\n## Description\n[Description narrative here]\n\n## Mapping Guidance\n- Map \"Name\" to the Markdown title placeholder.\n- Map \"Description\" to the Description section body.\n- Do not add any extra sections, headers, or metadata not defined in this template.\n- If the upstream system or user later selects a more structured template, this narrative can be migrated by mapping paragraphs to the appropriate fields.\n\n## Interaction and Missing Data Handling\n- If \"Name\" is missing: Ask one concise question to obtain a short, outcome-oriented title.\n- If \"Description\" is missing or too terse: Ask for 1–2 sentences covering the problem/opportunity and intended outcome. Do not over-question; request only the minimum to produce a useful narrative.\n- Language policy: Respond in the user’s language as detected. Maintain domain terms in their conventional language if it improves clarity.\n- Attachments policy: Do not prepend acknowledgements. This template has no Notes section, so omit acknowledgements entirely in the output.\n\n## Quality Checks\n- Outcome orientation: Title and narrative focus on value/outcome rather than implementation tasks.\n- Clarity: Narrative understandable by non-technical stakeholders.\n- Consistency: No contradictions within the narrative; terminology is consistent.\n- Concision: Avoid redundant statements; keep the description focused on the epic’s intent.\n\n## Constraints\n- Do not include any content outside the defined structure.\n- Do not list acceptance criteria, metrics, or NFRs within this template (use a different template if needed).\n- Do not reveal internal tools, processes, or prompt mechanics.\n\n## Examples\n### Good Output Example\n# Epic: Increase Self-Service Onboarding Conversion\n\n## Description\nNew users abandon onboarding due to unclear steps and late identity verification. This epic focuses on simplifying the early onboarding experience to accelerate time-to-first-session. The intended outcome is a measurable increase in the rate of users who complete onboarding and begin using the product successfully.\nIn scope are improvements to the guidance provided during initial steps and the timing of lightweight verification. Not included are pricing changes or billing engine redesigns. Success will be indicated by higher completion of key onboarding milestones and reduced friction at the earliest steps.\n\n### Bad Output Example\n# Epic: Implement New Backend Services\n\n## Description\nBuild microservices for onboarding and notifications to modernize the stack.\n(Issues: output-focused, lacks outcome/value statement, and is overly implementation-centric.)",
  "generated_content": {
    "title": "Develop a Robust User Authentication System",
    "formatted_output": "# Epic: Develop a Robust User Authentication System\n\n## Description\nThe need for a secure and efficient user authentication system has become critical as our application scales. This epic focuses on implementing a comprehensive solution that includes user login, registration, and password recovery functionalities. The expected outcome is to enhance user trust and streamline access to the application, ultimately leading to increased user engagement and retention.\n\nIn scope are features such as email-based registration with secure password validation, token-based authentication for session management, and a secure password recovery process that utilizes email reset links. Not included are any changes to user profile management or third-party authentication integrations at this stage. Success will be assessed through improved user feedback on the login process and a reduction in support requests related to account access."
  },
  "context": [
    {
      "content": "The application requires a robust and secure user authentication system to manage access control and protect user data. This system should support essential functionalities including user login, registration, and password recovery. Users must be able to register using their email and a secure password, with proper validation and confirmation mechanisms in place. Once registered, users should be able to log in using their credentials, and the system should manage sessions securely using token-based authentication. In cases where users forget their passwords, the system should provide a secure password recovery flow, including email-based reset links and token validation. Additionally, the authentication system must implement security best practices such as password encryption, protection against brute-force attacks, and audit logging of authentication events. The user experience should be seamless across devices, with clear feedback for all actions and accessibility compliance to ensure usability for all users."
    }
  ]
}
